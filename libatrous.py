# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg_parts = __name__.rpartition('.')
        pkg = pkg_parts[0]
        if pkg_parts[1] != '.':
            pkg = pkg_parts[2]
        mname = '.'.join((pkg, '_libatrous')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libatrous')
    _libatrous = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libatrous', [dirname(__file__)])
        except ImportError:
            import _libatrous
            return _libatrous
        try:
            _mod = imp.load_module('_libatrous', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libatrous = swig_import_helper()
    del swig_import_helper
else:
    import _libatrous
# pull in all the attributes from _libatrous
if __name__.rpartition('.')[0] != '':
    if _swig_python_version_info >= (2, 7, 0):
        try:
            from ._libatrous import *
        except ImportError:
            from _libatrous import *
    else:
        from _libatrous import *
else:
    from _libatrous import *
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

def get_scales(input_array, nscales, kernel):
    scales = []
    lowpass = input_array.astype('float32')
    for i in range(nscales):
        bandpass,lowpass = iterscale(lowpass,kernel,i)
        scales.append(bandpass)

    scales.append(lowpass)
    return scales

def get_bandpass(input_array, scale1, scale2, kernel, add_lowpass=False):
    lowpass = input_array.astype('float32')
    for i in range(scale1+1):
        output,lowpass = iterscale(lowpass,kernel,i)

    for i in range(scale1+1, scale2+1):
        bandpass,lowpass = iterscale(lowpass,kernel,i)
        output += bandpass

    if add_lowpass:
        output += lowpass

    return output

def get_lowpass(input_array, n_discarded, kernel):
    lowpass = input_array.astype('float32')
    for i in range(n_discarded):
        bandpass,lowpass = iterscale(lowpass,kernel,i)

    return lowpass

#Edge aware
def get_scales_ea(input_array, nscales, kernel, sigmar, alpha):
    scales = []
    max_input = int(input_array.max())
    sigmar = sigmar * max_input
    lowpass = input_array.astype('float32')
    for i in range(nscales):
        dmap = get_dmap(i,nscales,sigmar,alpha,max_input)
        bandpass,lowpass = iterscale_ea(lowpass,kernel,dmap,i)
        scales.append(bandpass)

    scales.append(lowpass)
    return scales

def get_bandpass_ea(input_array, scale1, scale2, kernel, sigmar, alpha, add_lowpass=False):
    max_input = int(input_array.max())
    sigmar = sigmar * max_input
    lowpass = input_array.astype('float32')
    for i in range(scale1+1):
        dmap = get_dmap(i,nscales,sigmar,alpha,max_input)
        output,lowpass = iterscale_ea(lowpass,kernel,dmap,i)

    for i in range(scale1+1, scale2+1):
        dmap = get_dmap(i,nscales,sigmar,alpha,max_input)
        bandpass,lowpass = iterscale_ea(lowpass,kernel,dmap,i)
        output += bandpass

    if add_lowpass:
        output += lowpass

    return output

def get_lowpass_ea(input_array, n_discarded, kernel, sigmar, alpha):
    max_input = int(input_array.max())
    sigmar = sigmar * max_input
    lowpass = input_array.astype('float32')
    for i in range(n_discarded):
        dmap = get_dmap(i,nscales,sigmar,alpha,max_input)
        bandpass,lowpass = iterscale_ea(lowpass,kernel,dmap,i)

    return lowpass


# This file is compatible with both classic and new-style classes.


